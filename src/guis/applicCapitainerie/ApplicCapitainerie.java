/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package guis.applicCapitainerie;

import authenticate.IConnectable;
import guis.logins.DialLogin;
import guis.message.TypeMessage;
import java.awt.Component;
import java.awt.Container;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.text.DateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import static javax.swing.JOptionPane.showMessageDialog;
import mainClasses.*;
import network.NetworkBasicServer;

/**
 *
 * @author Jija
 */
public class ApplicCapitainerie extends javax.swing.JFrame implements IConnectable {
    private NetworkBasicServer connectionServer;
    
    private DialLogin diaLog;
    private Date current_date = new Date();
    private int format_date;
    private int format_heure;
    private Locale region = Locale.ROOT;
    private DateFormat formatage = DateFormat.getDateTimeInstance();
    
    private ArrayList<Amarrage> lPonton = new ArrayList<>(); // pour les bateaux plaisances
    private ArrayList<Amarrage> lQuai = new ArrayList<>(); // pour les bateaux de peches
    private Properties applicProp;
    private FichierLog log;
    
    private TypeMessage lastRequest;
    private String lastRequestTypeBoat;
    
    private Bateau boat_toAdd;
    private String empl_of_boat_toAdd;
    
    private DefaultListModel listEnteredBoat = new DefaultListModel();
    
    /**
     * Creates new form applicCapitainerie
     */
    public ApplicCapitainerie() {
        initComponents();
        deconnection();
        
        dateLabel.setVisible(false);
        
        diaLog = new DialLogin(this, false);
        diaLog.setVisible(true);
        this.setLocationRelativeTo(null);
        
        loadAll();
        jListEnteredBoat.setModel(listEnteredBoat);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonStartServer = new javax.swing.JButton();
        checkBoxRequest = new javax.swing.JCheckBox();
        buttonRead = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        buttonChoose = new javax.swing.JButton();
        textFieldAmarrage = new javax.swing.JTextField();
        buttonSendChoice = new javax.swing.JButton();
        textFieldEmplacement = new javax.swing.JTextField();
        buttonSendConfirmation = new javax.swing.JButton();
        textFieldRequest = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListEnteredBoat = new javax.swing.JList();
        jLabel2 = new javax.swing.JLabel();
        buttonBoatDocked = new javax.swing.JButton();
        dateLabel = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuUsers = new javax.swing.JMenu();
        menuItemLogin = new javax.swing.JMenuItem();
        menuItemLogout = new javax.swing.JMenuItem();
        menuItemChangePwd = new javax.swing.JMenuItem();
        menuItemNew = new javax.swing.JMenuItem();
        menuDocking = new javax.swing.JMenu();
        jMenuItemPlaisance = new javax.swing.JMenuItem();
        jMenuItemPeche = new javax.swing.JMenuItem();
        menuBoats = new javax.swing.JMenu();
        jMenuItemBoatListing = new javax.swing.JMenuItem();
        jMenuItemBoatSearch = new javax.swing.JMenuItem();
        menuStaff = new javax.swing.JMenu();
        jMenuItemCrewListing = new javax.swing.JMenuItem();
        jMenuItemCrewSearch = new javax.swing.JMenuItem();
        menuSettings = new javax.swing.JMenu();
        menuItemDateFormat = new javax.swing.JMenuItem();
        menuItemFileLog = new javax.swing.JMenuItem();
        checkBoxMenuItemDisplayDate = new javax.swing.JCheckBoxMenuItem();
        menuAbout = new javax.swing.JMenu();
        menuItemAuthor = new javax.swing.JMenuItem();
        menuItemHelp = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Capitainerie d'Inpres-Harbour");
        setName("Applic_Capitainerie"); // NOI18N
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        buttonStartServer.setText("Démarrer le serveur");
        buttonStartServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonStartServerActionPerformed(evt);
            }
        });

        checkBoxRequest.setText("Requête en attente");

        buttonRead.setText("Lire");
        buttonRead.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonReadActionPerformed(evt);
            }
        });

        jLabel1.setText("Amarrage possible :");

        buttonChoose.setText("Choisir");
        buttonChoose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonChooseActionPerformed(evt);
            }
        });

        buttonSendChoice.setText("Envoyer choix");
        buttonSendChoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSendChoiceActionPerformed(evt);
            }
        });

        buttonSendConfirmation.setText("Envoyer confirmation");
        buttonSendConfirmation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSendConfirmationActionPerformed(evt);
            }
        });

        jListEnteredBoat.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(jListEnteredBoat);

        jLabel2.setText("Bateaux en entrée");

        buttonBoatDocked.setText("Bateau amarré");
        buttonBoatDocked.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonBoatDockedActionPerformed(evt);
            }
        });

        dateLabel.setText("date");

        menuUsers.setText("Utilisateurs");

        menuItemLogin.setText("Login");
        menuItemLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemLoginActionPerformed(evt);
            }
        });
        menuUsers.add(menuItemLogin);

        menuItemLogout.setText("Logout");
        menuItemLogout.setEnabled(false);
        menuItemLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemLogoutActionPerformed(evt);
            }
        });
        menuUsers.add(menuItemLogout);

        menuItemChangePwd.setText("Changer mot de passe");
        menuItemChangePwd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemChangePwdActionPerformed(evt);
            }
        });
        menuUsers.add(menuItemChangePwd);

        menuItemNew.setText("Nouveau");
        menuItemNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemNewActionPerformed(evt);
            }
        });
        menuUsers.add(menuItemNew);

        jMenuBar1.add(menuUsers);

        menuDocking.setText("Amarrages");

        jMenuItemPlaisance.setText("Plaisance");
        jMenuItemPlaisance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemPlaisanceActionPerformed(evt);
            }
        });
        menuDocking.add(jMenuItemPlaisance);

        jMenuItemPeche.setText("Pêche");
        jMenuItemPeche.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemPecheActionPerformed(evt);
            }
        });
        menuDocking.add(jMenuItemPeche);

        jMenuBar1.add(menuDocking);

        menuBoats.setText("Bateaux");

        jMenuItemBoatListing.setText("Liste complète");
        jMenuItemBoatListing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemBoatListingActionPerformed(evt);
            }
        });
        menuBoats.add(jMenuItemBoatListing);

        jMenuItemBoatSearch.setText("Rechercher un bateau");
        jMenuItemBoatSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemBoatSearchActionPerformed(evt);
            }
        });
        menuBoats.add(jMenuItemBoatSearch);

        jMenuBar1.add(menuBoats);

        menuStaff.setText("Personnel");

        jMenuItemCrewListing.setText("Equipage d'un bateau");
        jMenuItemCrewListing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCrewListingActionPerformed(evt);
            }
        });
        menuStaff.add(jMenuItemCrewListing);

        jMenuItemCrewSearch.setText("Recherche d'un marin");
        jMenuItemCrewSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCrewSearchActionPerformed(evt);
            }
        });
        menuStaff.add(jMenuItemCrewSearch);

        jMenuBar1.add(menuStaff);

        menuSettings.setText("Paramètres");

        menuItemDateFormat.setText("Format date");
        menuItemDateFormat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemDateFormatActionPerformed(evt);
            }
        });
        menuSettings.add(menuItemDateFormat);

        menuItemFileLog.setText("Fichier log");
        menuItemFileLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemFileLogActionPerformed(evt);
            }
        });
        menuSettings.add(menuItemFileLog);

        checkBoxMenuItemDisplayDate.setText("Affichage date-heure courante");
        checkBoxMenuItemDisplayDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxMenuItemDisplayDateActionPerformed(evt);
            }
        });
        menuSettings.add(checkBoxMenuItemDisplayDate);

        jMenuBar1.add(menuSettings);

        menuAbout.setText("A propos");

        menuItemAuthor.setText("Auteur");
        menuItemAuthor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemAuthorActionPerformed(evt);
            }
        });
        menuAbout.add(menuItemAuthor);

        menuItemHelp.setText("Aide");
        menuItemHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemHelpActionPerformed(evt);
            }
        });
        menuAbout.add(menuItemHelp);

        jMenuBar1.add(menuAbout);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(buttonStartServer)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(dateLabel))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(checkBoxRequest)
                                    .addComponent(jLabel1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(buttonChoose)
                                    .addComponent(buttonRead))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(textFieldRequest)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(textFieldAmarrage, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(buttonSendChoice)
                                                .addGap(18, 18, 18)
                                                .addComponent(textFieldEmplacement, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(buttonSendConfirmation)
                                                .addGap(0, 13, Short.MAX_VALUE))
                                            .addComponent(jScrollPane1))))))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addGap(159, 159, 159))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(buttonBoatDocked)
                .addGap(154, 154, 154))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buttonStartServer)
                    .addComponent(dateLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkBoxRequest)
                    .addComponent(buttonRead)
                    .addComponent(textFieldRequest, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(buttonChoose)
                    .addComponent(textFieldAmarrage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonSendChoice)
                    .addComponent(textFieldEmplacement, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonSendConfirmation))
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addGap(10, 10, 10)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addComponent(buttonBoatDocked)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void menuItemLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemLoginActionPerformed
        if (diaLog == null)
            diaLog = new DialLogin(this, true);
        else
            diaLog.clear();
        
        diaLog.setVisible(true);
    }//GEN-LAST:event_menuItemLoginActionPerformed

    private void menuItemLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemLogoutActionPerformed
        this.deconnection();
    }//GEN-LAST:event_menuItemLogoutActionPerformed

    private void checkBoxMenuItemDisplayDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxMenuItemDisplayDateActionPerformed
        // TODO add your handling code here:
        if(checkBoxMenuItemDisplayDate.getState() == true)
        {
            current_date = new Date();
            dateLabel.setText(formatage.format(current_date));
            dateLabel.setVisible(true);
            
            log.writeLine("Date", "Affichage, true ("+current_date+")");
        }
        else
        {
            dateLabel.setText("date");
            dateLabel.setVisible(false);
            
            log.writeLine("Date", "Affichage, false");
        }
    }//GEN-LAST:event_checkBoxMenuItemDisplayDateActionPerformed

    private void menuItemAuthorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemAuthorActionPerformed
        javax.swing.JOptionPane.showMessageDialog(null, "Auteur: Ilja Kamischin\nProgramme créé en 2015");
    }//GEN-LAST:event_menuItemAuthorActionPerformed

    private void menuItemChangePwdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemChangePwdActionPerformed
        diaLog.setVisible(true);
    }//GEN-LAST:event_menuItemChangePwdActionPerformed

    private void menuItemNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemNewActionPerformed
        DialogNewUser dia = new DialogNewUser(this, true);
        
        dia.setVisible(true);
        
        if(dia.Ok)
        {
            if(dia.textFieldPwd.getText().equals(dia.textFieldPwdConfirmed.getText()))
                diaLog.vuph.addUser(dia.textFieldLogin.getText(), dia.textFieldPwd.getText());
            else
                javax.swing.JOptionPane.showMessageDialog(null, 
                        "Les deux mots de passe ne sont pas identiques.");
        }
    }//GEN-LAST:event_menuItemNewActionPerformed

    private void menuItemHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemHelpActionPerformed
        DialogAide dia = new DialogAide(this, false);
        
        dia.setVisible(true);
        
        log.writeLine("Ouverture", "Dialog d'aide");
    }//GEN-LAST:event_menuItemHelpActionPerformed

    private void menuItemDateFormatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemDateFormatActionPerformed
        DialogDate dia = new DialogDate(this, true);
        
        dia.setVisible(true);
        
        if(dia.Ok)
        {
            switch(dia.comboBoxPays.getSelectedItem().toString()) {
                case "France":
                    region = Locale.FRANCE;
                    break;
                case "Royaume Uni":
                    region = Locale.UK;
                    break;
                case "Allemagne":
                    region = Locale.GERMANY;
                    break;
                case "Italie":
                    region = Locale.ITALY;
                    break;
                case "U.S.A.":
                    region = Locale.US;
                    break;
            }
            
            switch (dia.comboBoxDate.getSelectedItem().toString()) {
                case "court":
                    format_date = DateFormat.SHORT;
                    break;
                case "moyen":
                    format_date = DateFormat.MEDIUM;
                    break;
                case "long":
                    format_date = DateFormat.LONG;
                    break;
                case "complet":
                    format_date = DateFormat.FULL;
                    break;
            }
            
            switch(dia.comboBoxHeure.getSelectedItem().toString()) {
                case "heure minute":
                    format_heure = DateFormat.SHORT;
                    break;
                case "heure minute seconde":
                    format_heure = DateFormat.MEDIUM;
                    break;
                case "heure minute seconde fuseau horaire":
                    format_heure = DateFormat.LONG;
                    break;
            }
            
            log.writeLine("Nouveau format date", "date:"+dia.comboBoxDate.getSelectedItem().toString() + 
                    " - heure:"+ dia.comboBoxHeure.getSelectedItem().toString());
            
            formatage = DateFormat.getDateTimeInstance(format_date, format_heure, region);
            
            if(checkBoxMenuItemDisplayDate.getState() == true)
                dateLabel.setText(formatage.format(current_date));
        }   
    }//GEN-LAST:event_menuItemDateFormatActionPerformed

    private void buttonStartServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonStartServerActionPerformed
        if(connectionServer == null) {
            connectionServer = new NetworkBasicServer(Integer.parseInt(applicProp.getProperty("port")), this.checkBoxRequest);
            
            log.writeLine("Serveur", "lancé");
            
            buttonStartServer.setText("Arreter le serveur");
        }
        else {
            //connectionServer.setEndReceiving();
            connectionServer = null;
            
            log.writeLine("Serveur", "arrêté");
            
            buttonStartServer.setText("Démarrer le serveur");
        }
    }//GEN-LAST:event_buttonStartServerActionPerformed

    private void buttonReadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonReadActionPerformed
        if(checkBoxRequest.isSelected()) {
            String message = connectionServer.getMessage();
            String splitted[] = message.split(":");
            
            log.writeLine("Message reçu", message);
            
            lastRequest = TypeMessage.valueOf(splitted[0]);
            
            if(lastRequest.toString().equals(TypeMessage.NewBoat.toString())) {
                lastRequestTypeBoat = splitted[1];
            
                String bateauInfo[] = splitted[3].split("/");

                textFieldRequest.setText(splitted[3]);

                String nom = bateauInfo[0];
                float longueur =  Float.parseFloat(bateauInfo[1]);
                Pavillon p = Pavillon.valueOf(bateauInfo[2]);

                if(lastRequestTypeBoat.equals("Peche")) {
                    try {
                        boat_toAdd = new BateauPeche(BateauPeche.typePeche.valueOf(splitted[2]),
                                nom, "Default", 0, longueur, p, 0, null);
                    } catch (ShipWithoutIdentificationException ex) {
                        Logger.getLogger(ApplicCapitainerie.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                else {
                    try {
                        boat_toAdd = new BateauPlaisance(BateauPlaisance.typePermis.valueOf(splitted[2]),
                                nom, "Default", 0, longueur, p, 0, null);
                    } catch (ShipWithoutIdentificationException ex) {
                        Logger.getLogger(ApplicCapitainerie.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
            else if(lastRequest.toString().equals(TypeMessage.BoatIn.toString())) {
                if(boat_toAdd != null) {
                    textFieldEmplacement.setText(boat_toAdd.getNom().charAt(0) + "<--" + textFieldAmarrage.getText());
                }
            }
        }
        else
            javax.swing.JOptionPane.showMessageDialog(null, "Il n'y a pas de message");
    }//GEN-LAST:event_buttonReadActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        /*Sauvegarde*/
        log.writeLine("Fermeture de l'application");
        
        File dir = new File(System.getProperty("user.home") + System.getProperty("file.separator") + "java");
        
        if(!dir.exists())
            dir.mkdir();
        
        String path = dir.getAbsolutePath() + System.getProperty("file.separator");
        
        File quaiData = new File(path + "quai.data");
        File pontonData = new File(path + "ponton.data");
        File arriveeData = new File(path + "arrivee.data");
        File properties = new File(path + "option.properties");
        
        savePonton(quaiData);
        saveQuai(pontonData);
        saveArrivee(arriveeData);
        
        PortProperties pp = new PortProperties(applicProp);
        pp.save(properties);
        
    }//GEN-LAST:event_formWindowClosing

    private void buttonChooseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonChooseActionPerformed
        DialogChooseAmarrage dia;
        
        
        if(lastRequest != null && lastRequest.toString().equals(TypeMessage.NewBoat.toString())) {
            if(lastRequestTypeBoat.equals("Peche"))
                dia = new DialogChooseAmarrage(this, true, lQuai, true);
            else
                dia = new DialogChooseAmarrage(this, true, lPonton, true);
            
            dia.setVisible(true);
            
            if(dia.ok)
            {
                log.writeLine("Emplacement choisi", dia.empl);
                textFieldAmarrage.setText(dia.empl);
                empl_of_boat_toAdd = dia.indexEmpl+"-"+dia.indexList;
            }
            
        }
    }//GEN-LAST:event_buttonChooseActionPerformed

    private void jMenuItemPlaisanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemPlaisanceActionPerformed
        DialogChooseAmarrage dia = new DialogChooseAmarrage(this, true, lPonton, false);
        
        log.writeLine("Ouverture", "Amarrage de plaisance");
        
        dia.setVisible(true);
    }//GEN-LAST:event_jMenuItemPlaisanceActionPerformed

    private void jMenuItemPecheActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemPecheActionPerformed
       DialogChooseAmarrage dia = new DialogChooseAmarrage(this, true, lQuai, false);
        
       log.writeLine("Ouverture", "Amarrage de pêche");
       
        dia.setVisible(true);
    }//GEN-LAST:event_jMenuItemPecheActionPerformed

    private void buttonSendChoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSendChoiceActionPerformed
        if(!textFieldAmarrage.getText().equals("")) {
            String messageToSend = textFieldAmarrage.getText();
            
            
            connectionServer.sendMessage(messageToSend);
            log.writeLine("Message envoyé", messageToSend);
        }
    }//GEN-LAST:event_buttonSendChoiceActionPerformed

    private void buttonSendConfirmationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSendConfirmationActionPerformed
        if(!textFieldEmplacement.getText().equals("")) {
            String messageToSend = textFieldEmplacement.getText();
            
            
            ArrayList<Integer> emp = new ArrayList<>();
            
            for (String ind : empl_of_boat_toAdd.split("-")) {
                emp.add(Integer.parseInt(ind));
            }
            
            if(lastRequestTypeBoat.equals("Peche")) {
                try {
                    ((Quai)lQuai.get(emp.get(0))).ajouter(boat_toAdd, emp.get(1));
                } catch (PlaceAlreadyTakenException ex) {
                    Logger.getLogger(ApplicCapitainerie.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            else {
                try {
                    ((Ponton)lPonton.get(emp.get(0))).ajouter(boat_toAdd, emp.get(1));
                } catch (PlaceAlreadyTakenException ex) {
                    Logger.getLogger(ApplicCapitainerie.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
         
            Arrivee a = new Arrivee(boat_toAdd, empl_of_boat_toAdd);
            listEnteredBoat.addElement(a);
            
            connectionServer.sendMessage(messageToSend);
            log.writeLine("Message envoyé", messageToSend);

            textFieldRequest.setText("");
            textFieldAmarrage.setText("");
            textFieldEmplacement.setText("");
        }
    }//GEN-LAST:event_buttonSendConfirmationActionPerformed

    private void buttonBoatDockedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonBoatDockedActionPerformed
        if(jListEnteredBoat.getSelectedValue() != null) {
            jListEnteredBoat.setSelectedIndex(-1);
            jListEnteredBoat.setSelectedValue(null, false);
            
            Arrivee a = (Arrivee)jListEnteredBoat.getSelectedValue();
            
            DialogInformationBoat dia = new DialogInformationBoat(this, true, a);
            
            dia.setVisible(true);
            
            if(dia.ok) {
                ArrayList<Integer> emp = new ArrayList<>();
            
                for (String ind : a.getEmplacement().split("-")) {
                    emp.add(Integer.parseInt(ind));
                }
                
                if(a.getBoat() instanceof BateauPeche) {
                    ((Bateau)((Quai)lQuai.get(emp.get(0))).get(emp.get(1))).setCrew(dia.crew);
                    ((Bateau)((Quai)lQuai.get(emp.get(0))).get(emp.get(1))).setTonnage(dia.tonnage);
                    ((Bateau)((Quai)lQuai.get(emp.get(0))).get(emp.get(1))).setPortAttache(dia.portAttache);
                }
                else if(a.getBoat() instanceof BateauPlaisance) {
                    ((Bateau)((Ponton)lPonton.get(emp.get(0))).get(emp.get(1))).setCrew(dia.crew);
                    ((Bateau)((Ponton)lPonton.get(emp.get(0))).get(emp.get(1))).setTonnage(dia.tonnage);
                    ((Bateau)((Ponton)lPonton.get(emp.get(0))).get(emp.get(1))).setPortAttache(dia.portAttache);
                }
                
                listEnteredBoat.removeElement(a);
            }
        }
    }//GEN-LAST:event_buttonBoatDockedActionPerformed

    private ArrayList<Bateau> regroupBoat() {
        ArrayList<Bateau> list = new ArrayList();
        
        for (Amarrage item : lQuai) {
            for (int i = 0; i < item.getCapacite(); i++) {
                if(item.get(i) != null)
                    list.add((Bateau)item.get(i));
            }
        }
        
        for (Amarrage item : lPonton) {
            for (int i = 0; i < item.getCapacite(); i++) {
                if(item.get(i) != null)
                    list.add((Bateau)item.get(i));
            }
        }
        
        return list;
    }
    private void jMenuItemBoatListingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemBoatListingActionPerformed
        ArrayList<Bateau> list = regroupBoat();
        
        if(list.size() == 0)
            javax.swing.JOptionPane.showMessageDialog(null, "Il n'y a pas de bateau à lister");
        else {
            DialogListing dia = new DialogListing(this, true, list);
            
            dia.setVisible(true);
        }
    }//GEN-LAST:event_jMenuItemBoatListingActionPerformed

    private void jMenuItemBoatSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemBoatSearchActionPerformed
        ArrayList<Bateau> list = regroupBoat();
        
        if(list.size() == 0)
            javax.swing.JOptionPane.showMessageDialog(null, "Il n'y a pas de bateau à rechercher");
        else {
            DialogListing dia = new DialogListing(this, true, list);
            
            dia.setTitle("Choisissez le bateau à afficher");
            dia.setVisible(true);
            
            if(dia.boat_name != null) {
                Bateau boat = null;
                
                for (Bateau item : list) {
                    if(item.getNom().equals(dia.boat_name))
                        boat = item;
                }
                
                DialogBoatInfo dia2 = new DialogBoatInfo(this, true, boat);
                
                dia2.setVisible(true);
            }
        }
    }//GEN-LAST:event_jMenuItemBoatSearchActionPerformed

    private void jMenuItemCrewListingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCrewListingActionPerformed
        ArrayList<Bateau> list = regroupBoat();
        
        if(list.size() == 0)
            javax.swing.JOptionPane.showMessageDialog(null, "Il n'y a pas de bateau à rechercher");
        else {
            DialogListing dia = new DialogListing(this, true, list);
            
            dia.setTitle("Choisissez le bateau de l'equipage à afficher");
            dia.setVisible(true);
            
            if(dia.boat_name != null) {
                Bateau boat = null;
                
                for (Bateau item : list) {
                    if(item.getNom().equals(dia.boat_name))
                        boat = item;
                }
                
                DialogListing dia2 = new DialogListing(this, true, boat.getCrew());
                
                dia2.setVisible(true);
            }
        }
    }//GEN-LAST:event_jMenuItemCrewListingActionPerformed

    private void jMenuItemCrewSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCrewSearchActionPerformed
        ArrayList<Bateau> list = regroupBoat();
        
        if(list.size() == 0)
            javax.swing.JOptionPane.showMessageDialog(null, "Il n'y a pas de bateau à rechercher");
        else {
            DialogListing dia = new DialogListing(this, true, list);
            
            dia.setTitle("Choisissez le bateau de l'equipage à afficher");
            dia.setVisible(true);
            
            if(dia.boat_name != null) {
                Bateau boat = null;
                
                for (Bateau item : list) {
                    if(item.getNom().equals(dia.boat_name))
                        boat = item;
                }
                
                DialogListing dia2 = new DialogListing(this, true, boat.getCrew());
                
                dia2.setTitle("Choisissez le marin à afficher");
                dia2.setVisible(true);
                
                if(dia2.person_name != null) {
                    Marin p = null;
                    Equipage e = boat.getCrew();
                    
                    if(e.getCapitaine().getNom().equals(dia2.person_name))
                        p = e.getCapitaine();
                    else if(e.getSecond().getNom().equals(dia2.person_name))
                        p = e.getSecond();
                    else {
                        for (int i = 0; i < e.getNombreMarin(); i++) {
                            if(e.getMarin(i).getNom().equals(dia2.person_name))
                                p = e.getMarin(i);
                        }
                    }
                    
                    DialogPersonInfo dia3 = new DialogPersonInfo(this, true, p);
                    
                    dia3.setVisible(true);
                }
            }
        }
    }//GEN-LAST:event_jMenuItemCrewSearchActionPerformed

    private void menuItemFileLogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemFileLogActionPerformed
        DialogLog dia = new DialogLog(this, true, log.getF());
        
        log.writeLine("Affichage", "Dialog de log");
        
        dia.setVisible(true);
    }//GEN-LAST:event_menuItemFileLogActionPerformed

    public void connection() {
        this.menuItemLogin.setEnabled(false);
        this.menuItemLogout.setEnabled(true);
        menuItemChangePwd.setEnabled(true);
        menuItemNew.setEnabled(true);
        this.diaLog.setVisible(false);
        
        menuDocking.setEnabled(true);
        menuSettings.setEnabled(true);
        menuStaff.setEnabled(true);
        menuBoats.setEnabled(true);
        
        buttonStartServer.setEnabled(true);
        buttonBoatDocked.setEnabled(true);
        buttonRead.setEnabled(true);
        buttonSendChoice.setEnabled(true);
        buttonSendConfirmation.setEnabled(true);
        buttonChoose.setEnabled(true);
        checkBoxRequest.setEnabled(true);
    }
    
    public void deconnection(){
        if (diaLog != null)
        {
            this.menuItemLogin.setEnabled(true);
            this.menuItemLogout.setEnabled(false);
            
            this.diaLog.setLogged(false);
        }
        
        menuItemNew.setEnabled(false);
        menuItemChangePwd.setEnabled(false);
        menuDocking.setEnabled(false);
        menuSettings.setEnabled(false);
        menuStaff.setEnabled(false);
        menuBoats.setEnabled(false);
        
        buttonStartServer.setEnabled(false);
        buttonBoatDocked.setEnabled(false);
        buttonRead.setEnabled(false);
        buttonSendChoice.setEnabled(false);
        buttonSendConfirmation.setEnabled(false);
        buttonChoose.setEnabled(false);
        checkBoxRequest.setEnabled(false);
    }
    
    public void saveObject(File f, Object o) {
        try {
            FileOutputStream fos = new FileOutputStream(f);
            ObjectOutputStream stream = new ObjectOutputStream(fos);
            
            try {
                stream.writeObject(o);
                
                fos.close();
            } catch (IOException ex) {
                Logger.getLogger(ApplicCapitainerie.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        catch (FileNotFoundException ex) {
            Logger.getLogger(ApplicCapitainerie.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ApplicCapitainerie.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void saveQuai(File f){
        saveObject(f, lQuai);
        log.writeLine("Sauvegarde", "quai");
    }
    
    public void savePonton(File f){
        saveObject(f, lPonton);
        log.writeLine("Sauvegarde", "ponton");
    }
    
    public void saveArrivee(File f){
        saveObject(f, listEnteredBoat);
        log.writeLine("Sauvegarde", "arrivée");
    }
    
    public void loadAll() {
        File dir = new File(System.getProperty("user.home") + System.getProperty("file.separator") + "java");
        
        if(!dir.exists()){
            dir.mkdir();
        }
       
        
        String path = dir.getAbsolutePath() + System.getProperty("file.separator");

        File quaiData = new File(path + "quai.data");
        File pontonData = new File(path + "ponton.data");
        File arriveeData = new File(path + "arrivee.data");
        File properties = new File(path + "option.properties");
        File flog = new File(path + "log");
        
        log = new FichierLog(flog);
        log.writeLine("Lancement de l'application");

        if(!quaiData.exists() || !pontonData.exists() || !arriveeData.exists() || !properties.exists()) {
            deleteFiles(dir);
            initPort();
        }
        else {
            loadQuai(quaiData);
            loadPonton(pontonData);
            loadArrivee(arriveeData);

            PortProperties pp = new PortProperties();
            pp.load(properties);
            applicProp = pp.getProp();

        }
    }
    
    public void deleteFiles(File f) {
        String[]entries = f.list();
        
        for(String s: entries){
            File currentFile = new File(f.getPath(), s);
            currentFile.delete();
        }
    }
    
    public void initPort() {
        log.writeLine("Initialisation d'un nouveau port");
        
        lPonton.add(new Ponton("P1", 5));
        lPonton.add(new Ponton("P2", 8));
        lPonton.add(new Ponton("P3", 5));
        
        lQuai.add(new Quai("Q1", 6));
        lQuai.add(new Quai("Q2", 5));
        
        PortProperties pp = new PortProperties();
        applicProp = pp.getProp();
    }
    
    public Object loadObject(File f) {
        Object obj;
        
        try {
            FileInputStream fis = new FileInputStream(f);
            ObjectInputStream stream = new ObjectInputStream(fis);
            
            
            try {
                obj = stream.readObject();
                
                fis.close();
                return obj;
            } catch (IOException | ClassNotFoundException ex) {
                Logger.getLogger(ApplicCapitainerie.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        catch (FileNotFoundException ex) {
            Logger.getLogger(ApplicCapitainerie.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ApplicCapitainerie.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        return null;
    }
    
    public void loadQuai(File f) {
        lQuai = (ArrayList<Amarrage>)loadObject(f);
        log.writeLine("Chargement", "quai");
    }
    
    public void loadPonton(File f) {
        lPonton = (ArrayList<Amarrage>)loadObject(f);
        log.writeLine("Chargement", "ponton");
    }
    
    public void loadArrivee(File f) {
        listEnteredBoat = (DefaultListModel)loadObject(f);
        log.writeLine("Chargement", "arrivée");
    }
    

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ApplicCapitainerie.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ApplicCapitainerie.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ApplicCapitainerie.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ApplicCapitainerie.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ApplicCapitainerie().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonBoatDocked;
    private javax.swing.JButton buttonChoose;
    private javax.swing.JButton buttonRead;
    private javax.swing.JButton buttonSendChoice;
    private javax.swing.JButton buttonSendConfirmation;
    private javax.swing.JButton buttonStartServer;
    private javax.swing.JCheckBoxMenuItem checkBoxMenuItemDisplayDate;
    private javax.swing.JCheckBox checkBoxRequest;
    private javax.swing.JLabel dateLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JList jListEnteredBoat;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItemBoatListing;
    private javax.swing.JMenuItem jMenuItemBoatSearch;
    private javax.swing.JMenuItem jMenuItemCrewListing;
    private javax.swing.JMenuItem jMenuItemCrewSearch;
    private javax.swing.JMenuItem jMenuItemPeche;
    private javax.swing.JMenuItem jMenuItemPlaisance;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenu menuAbout;
    private javax.swing.JMenu menuBoats;
    private javax.swing.JMenu menuDocking;
    private javax.swing.JMenuItem menuItemAuthor;
    private javax.swing.JMenuItem menuItemChangePwd;
    private javax.swing.JMenuItem menuItemDateFormat;
    private javax.swing.JMenuItem menuItemFileLog;
    private javax.swing.JMenuItem menuItemHelp;
    private javax.swing.JMenuItem menuItemLogin;
    private javax.swing.JMenuItem menuItemLogout;
    private javax.swing.JMenuItem menuItemNew;
    private javax.swing.JMenu menuSettings;
    private javax.swing.JMenu menuStaff;
    private javax.swing.JMenu menuUsers;
    private javax.swing.JTextField textFieldAmarrage;
    private javax.swing.JTextField textFieldEmplacement;
    private javax.swing.JTextField textFieldRequest;
    // End of variables declaration//GEN-END:variables
}
