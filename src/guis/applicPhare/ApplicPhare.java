/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package guis.applicPhare;

import authenticate.IConnectable;
import beans.BoatBean;
import beans.BoatEvent;
import beans.KindOfBoatBean;
import beans.NotifyBean;
import guis.logins.DialLogin;
import guis.message.TypeMessage;
import mainClasses.Bateau;
import mainClasses.BateauPeche;
import mainClasses.BateauPlaisance;
import mainClasses.ShipWithoutIdentificationException;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.util.ArrayList;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import mainClasses.PortProperties;
import network.NetworkBasicClient;

/**
 *
 * @author Jija
 */
public class ApplicPhare extends javax.swing.JFrame implements IConnectable, PropertyChangeListener{
    private NetworkBasicClient connectionClient;
    private DefaultListModel listModel = new DefaultListModel();
    
    private KindOfBoatBean kobb;
    private BoatBean bb;
    private NotifyBean nb;
    
    private Bateau boat_toSend;
    
    private DialLogin dia;
    private Properties applicProp;

    
    
    /**
     * Creates new form applicPort
     */
    public ApplicPhare() {
        initComponents();
        
        loadProperty();
        
        kobb = new KindOfBoatBean(Integer.parseInt(applicProp.getProperty("borne-inf")),
                                  Integer.parseInt(applicProp.getProperty("borne-sup")),
                                  Integer.parseInt(applicProp.getProperty("multiple-decl")),
                                  Integer.parseInt(applicProp.getProperty("temps-pause")));
        bb = new BoatBean();
        nb = new NotifyBean();
        
        kobb.addPropertyChangeListener(bb);
        bb.addBoatEventListener(nb);
        nb.addPropertyChangeListener(this);
        
        listWaitingBoats.setModel(listModel);
        
        deconnection();
        
        dia = new DialLogin(this, false);
        dia.setVisible(true);
        this.setLocationRelativeTo(null);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonConnection = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listWaitingBoats = new javax.swing.JList();
        buttonNext = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        textFieldIdentifiedBoat = new javax.swing.JTextField();
        buttonAutorisation = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        buttonBoatEntered = new javax.swing.JButton();
        labelAnswer = new javax.swing.JLabel();
        labelConfirmation = new javax.swing.JLabel();
        buttonRaz = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Phare d'entrée d'Inpres-Harbour");
        setResizable(false);

        buttonConnection.setText("Se connecter au serveur");
        buttonConnection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonConnectionActionPerformed(evt);
            }
        });

        jLabel1.setText("Bateaux en attente");

        jScrollPane1.setViewportView(listWaitingBoats);

        buttonNext.setText("Suivant");
        buttonNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonNextActionPerformed(evt);
            }
        });

        jLabel3.setText("Bateau identifié :");

        buttonAutorisation.setText("Demande autorisation entrée");
        buttonAutorisation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAutorisationActionPerformed(evt);
            }
        });

        jLabel2.setText("Réponse de la capitainerie :");

        buttonBoatEntered.setText("Bateau entré dans le rade");
        buttonBoatEntered.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonBoatEnteredActionPerformed(evt);
            }
        });

        labelAnswer.setText(".");

        labelConfirmation.setText(".");

        buttonRaz.setText("RAZ");

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/guis/applicPhare/frontImg.png"))); // NOI18N
        jLabel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(textFieldIdentifiedBoat))
                            .addComponent(buttonAutorisation)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(buttonBoatEntered))
                                .addGap(34, 34, 34)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(labelAnswer)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(labelConfirmation)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(buttonRaz))))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(13, Short.MAX_VALUE)
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(buttonNext)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 168, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addGap(55, 55, 55))
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(buttonConnection)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(buttonConnection)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buttonNext))
                            .addComponent(jLabel4))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textFieldIdentifiedBoat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addComponent(buttonAutorisation)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(labelAnswer))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonBoatEntered)
                    .addComponent(labelConfirmation)
                    .addComponent(buttonRaz))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonConnectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonConnectionActionPerformed
        if (connectionClient == null) {
            connectionClient = new NetworkBasicClient("localhost", Integer.parseInt(applicProp.getProperty("port")));
            buttonConnection.setText("Se déconnecter du serveur");
        }
        else {
            //connectionClient.setEndSending();
            connectionClient = null;
            buttonConnection.setText("Se connecter au serveur");
        }
        
    }//GEN-LAST:event_buttonConnectionActionPerformed

    private void buttonNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonNextActionPerformed
        if(textFieldIdentifiedBoat.getText().equals("")) {
            if(!listModel.isEmpty()) {
                DialogIncomingBoat dia = new DialogIncomingBoat(this, true, (Bateau) listModel.getElementAt(0));

                dia.setVisible(true);

                if(dia.ok) {
                    boat_toSend = dia.getBoat();
                    listModel.removeElementAt(0);

                    textFieldIdentifiedBoat.setText(boat_toSend.getNom() + " / " + boat_toSend.getLongueur() + " m");
                }
            }
            else
                javax.swing.JOptionPane.showMessageDialog(null, "Il n'y a pas de bateau à l'horizon.");
        }
        else
            javax.swing.JOptionPane.showMessageDialog(null, "Vous ne pouvez traiter qu'un seul bateau à la fois!");
    }//GEN-LAST:event_buttonNextActionPerformed

    private void buttonAutorisationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAutorisationActionPerformed
        if(connectionClient == null)
            javax.swing.JOptionPane.showMessageDialog(null, "Vous n'êtes pas connecté à un serveur");
        else{
            if(textFieldIdentifiedBoat.getText().equals(""))
                javax.swing.JOptionPane.showMessageDialog(null, "Il n'y a pas de bateau identifié");
            else {
                String answer;
            
                if(boat_toSend instanceof BateauPeche)
                    answer = connectionClient.sendString(
                            TypeMessage.NewBoat + ":" + "Peche" + ":" + ((BateauPeche)boat_toSend).getType() + ":" + 
                            boat_toSend.getNom()+"/" +boat_toSend.getLongueur()+"/"+boat_toSend.getPavillon());
                else
                    answer = connectionClient.sendString(
                            TypeMessage.NewBoat + ":" + "Plaisance" + ":" + ((BateauPlaisance)boat_toSend).getPermis() + ":"+
                            boat_toSend.getNom()+"/" +boat_toSend.getLongueur()+"/"+boat_toSend.getPavillon());

                labelAnswer.setText(answer);
                labelConfirmation.setText(".");
            }
        }
    }//GEN-LAST:event_buttonAutorisationActionPerformed

    private void buttonBoatEnteredActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonBoatEnteredActionPerformed
        if(connectionClient == null)
            javax.swing.JOptionPane.showMessageDialog(null, "Vous n'êtes pas connecté à un serveur");
        else{
            if(labelAnswer.getText().equals("."))
                javax.swing.JOptionPane.showMessageDialog(null, "Il n'y a pas de bateau à faire entrer");
            else {
                String answer;
            
                if(boat_toSend instanceof BateauPeche)
                    answer = connectionClient.sendString(
                            TypeMessage.BoatIn + ":" + "Peche" + ":" + ((BateauPeche)boat_toSend).getType() + ":" + 
                            boat_toSend.getNom()+"/" +boat_toSend.getLongueur()+"/"+boat_toSend.getPavillon());
                else
                    answer = connectionClient.sendString(
                            TypeMessage.BoatIn + ":" + "Plaisance" + ":" + ((BateauPlaisance)boat_toSend).getPermis() + ":"+
                            boat_toSend.getNom()+"/" +boat_toSend.getLongueur()+"/"+boat_toSend.getPavillon());

                labelAnswer.setText(".");
                textFieldIdentifiedBoat.setText("");
                labelConfirmation.setText(answer);
                
                
            }
        }
    }//GEN-LAST:event_buttonBoatEnteredActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ApplicPhare.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ApplicPhare.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ApplicPhare.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ApplicPhare.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ApplicPhare().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAutorisation;
    private javax.swing.JButton buttonBoatEntered;
    private javax.swing.JButton buttonConnection;
    private javax.swing.JButton buttonNext;
    private javax.swing.JButton buttonRaz;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelAnswer;
    private javax.swing.JLabel labelConfirmation;
    private javax.swing.JList listWaitingBoats;
    private javax.swing.JTextField textFieldIdentifiedBoat;
    // End of variables declaration//GEN-END:variables

    @Override
    public void connection() {
        buttonAutorisation.setEnabled(true);
        buttonBoatEntered.setEnabled(true);
        buttonConnection.setEnabled(true);
        buttonNext.setEnabled(true);
        buttonRaz.setEnabled(true);
        dia.setVisible(false);
        
        kobb.run();
    }

    @Override
    public void deconnection() {
        buttonAutorisation.setEnabled(false);
        buttonBoatEntered.setEnabled(false);
        buttonConnection.setEnabled(false);
        buttonNext.setEnabled(false);
        buttonRaz.setEnabled(false);
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        System.out.println("Ohh j'ai recu un bateau, ajoutons le dans la liste!");
        listModel.addElement((Bateau)evt.getNewValue());
    }
    
    private void loadProperty() {
        File dir = new File(System.getProperty("user.home") + System.getProperty("file.separator") + "java");
        
        if(dir.exists()){
            String path = dir.getAbsolutePath() + System.getProperty("file.separator");
            
            File properties = new File(path + "option.properties");
            
            if(!properties.exists()) {
                applicProp = new PortProperties().getProp();
            }
            else {
                PortProperties pp = new PortProperties();
                pp.load(properties);
                applicProp = pp.getProp();
            }
            
        }
        else {
            javax.swing.JOptionPane.showMessageDialog(null, "Le dossier de travail n'existe pas");
            this.setVisible(false);
            this.dispose();
        }
    }
}
